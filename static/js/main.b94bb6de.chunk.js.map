{"version":3,"sources":["../../src/use-time-until.ts","../../src/time-until.tsx","App.tsx","index.tsx"],"names":["useTimeUntil","date","delta","countdown","_ref$countdown","onFinish","_ref$onFinish","interval","_ref$interval","useState","Date","now","currentTime","setCurrentTime","targetTime","useMemo","getTime","timeDeltaNumber","Math","max","timeDelta","rounder","ceil","floor","abs","finished","timeUntil","seconds","getUTCSeconds","minutes","getUTCMinutes","hours","getUTCHours","days","getUTCDate","months","getUTCMonth","years","getUTCFullYear","useEffect","updater","window","setInterval","undefined","clearInterval","TimeUntil","format","_ref$format","prefix","_ref$prefix","suffix","_ref$suffix","andText","_ref$andText","finishText","value","props","yearsText","monthsText","daysText","hoursText","minutesText","secondsText","daysTimeString","hoursTimeString","toString","padStart","minutesTimeString","secondsTimeString","React","Fragment","Title","Typography","Text","Content","Layout","Sider","App","_delta","setDelta","moment","_date","setDate","dataType","setDataType","_updateInterval","setUpdateInterval","setFormat","inText","setInText","agoText","setAgoText","setCountdown","setFinishText","toDate","useDebounce","updateInterval","timeUntilProps","notification","info","message","timeUntilHookProps","controlledValue","currentDelta","width","style","background","padding","borderRight","size","direction","level","onChange","showTime","Group","options","label","target","optionType","display","margin","checked","disabled","title","valueRender","bordered","Item","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b94bb6de.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport { XOR } from './types'\n  \ninterface BaseProps {\n    // Update interval. If null, never update.\n    interval?: number | null\n}\ninterface CountdownProps {\n    // Countdown will stop at 0 instead of going into the negatives\n    countdown?: boolean\n    onFinish?: () => void\n}\nexport type UseTimeUntilProps = BaseProps & CountdownProps & XOR<{\n    date: Date\n}, {\n    delta: number\n}>\n\nexport interface TimeUntilValue {\n    delta: number,\n    seconds: number,\n    minutes: number,\n    hours: number,\n    days: number,\n    months: number,\n    years: number,\n    finished: boolean\n}\n\nexport const useTimeUntil = ({\n    date,\n    delta,\n    countdown=false,\n    onFinish=() => {},\n    interval=50\n}: UseTimeUntilProps): TimeUntilValue => {\n    const [currentTime, setCurrentTime] = useState<number>(Date.now())\n\n    const targetTime = useMemo<number>(() => (\n        date ? date.getTime() : new Date(Date.now() + delta!).getTime()\n    ), [date, delta])\n\n    // Delta until targetTime is reached\n    const timeDeltaNumber = useMemo<number>(() => (\n        countdown ? Math.max(0, targetTime - currentTime) : targetTime - currentTime\n    ), [targetTime, currentTime, countdown])\n    // MS until targetTime is reached as an epoch Date\n    const timeDelta = useMemo<Date>(() => {\n        const rounder = timeDeltaNumber > 0 ? Math.ceil : Math.floor\n        // const rounder = Math.ceil\n        return new Date(\n            rounder(\n                Math.abs(timeDeltaNumber) / 1000\n            ) * 1000\n        )\n    }, [timeDeltaNumber])\n\n    const finished = useMemo(() => (\n        timeDeltaNumber <= 0\n    ), [timeDeltaNumber])\n\n    const timeUntil = useMemo(() => ({\n        delta: timeDeltaNumber,\n        seconds: timeDelta.getUTCSeconds(),\n        minutes: timeDelta.getUTCMinutes(),\n        hours: timeDelta.getUTCHours(),\n        days: timeDelta.getUTCDate() - 1,\n        months: timeDelta.getUTCMonth(),\n        years: timeDelta.getUTCFullYear() - 1970,\n        finished\n    }), [timeDelta, timeDeltaNumber, finished])\n\n    useEffect(() => {\n        const updater = interval !== null ? window.setInterval(() => {\n            setCurrentTime(Date.now())\n        }, interval) : undefined\n        return () => {\n            window.clearInterval(updater)\n        }\n    }, [interval])\n\n    useEffect(() => {\n        if (countdown && finished) onFinish()\n    }, [countdown, finished])\n\n    return timeUntil\n}","/**\n * Countdown display component\n */\nimport React, { Fragment, ReactNode } from 'react'\nimport { TimeUntilValue, useTimeUntil, UseTimeUntilProps } from './use-time-until'\n\ntype TimeUntilProps = {\n    format?: \"text\" | \"time\"\n    prefix?: string\n    suffix?: string\n    andText?: string\n    finishText?: ReactNode\n} & Partial<UseTimeUntilProps> & Partial<{\n    value: TimeUntilValue\n}>\nexport const TimeUntil = ({\n    format=\"text\",\n    prefix=\"in \",\n    suffix=\" ago\",\n    andText=\" and \",\n    finishText=undefined,\n    value=undefined,\n    ...props\n}: TimeUntilProps) => {\n    const useTimeUntilProps: UseTimeUntilProps = value ? {\n        delta: 0,\n        interval: null\n    } : props as UseTimeUntilProps\n    let { delta, seconds, minutes, hours, days, months, years, finished } = useTimeUntil(useTimeUntilProps)\n    if (value) ({ delta, seconds, minutes, hours, days, months, years, finished } = value)\n\n    const yearsText = years !== 1 ? `${ years } years` : `1 year`\n    const monthsText = months !== 1 ? `${ months } months` : `1 month`\n    const daysText = days !== 1 ? `${ days } days` : `1 day`\n    const hoursText = hours !== 1 ? `${ hours } hours` : `1 hour`\n    const minutesText = minutes !== 1 ? `${ minutes } minutes` : `1 minute`\n    const secondsText = seconds !== 1 ? `${ seconds } seconds` : `1 second`\n\n    const daysTimeString = days\n    const hoursTimeString = days === 0 && hours === 1 ? hours : hours.toString().padStart(2, \"0\")\n    const minutesTimeString = hours === 0 && minutes === 1 ? minutes : minutes.toString().padStart(2, \"0\")\n    const secondsTimeString = seconds.toString().padStart(2, \"0\")\n    if (props.countdown && finishText && finished) return (\n        <Fragment>\n            { finishText }\n        </Fragment>\n    )\n    if (format === \"text\") return (\n        <Fragment>\n            { delta >= 0 && prefix }\n            { years > 0 ? (\n                `${ yearsText }${ andText }${ monthsText }`\n            ) : months > 0 ? (\n                `${ monthsText }${ andText }${ daysText }`\n            ) : days > 0 ? (\n                `${ daysText }${ andText }${ hoursText }`\n            ) : hours > 0 ? (\n                `${ hoursText }${ andText }${ minutesText }`\n            ) : minutes > 0 ? (\n                `${ minutesText }${ andText }${ secondsText }`\n            ) : (\n                `${ secondsText }`\n            ) }\n            { delta < 0 && suffix }\n        </Fragment>\n    )\n    if (format === \"time\") return (\n        <Fragment>\n            { days > 0 ? (\n                daysTimeString + \":\"\n            ) : \"\" }\n            { hours > 0 ? (\n                hoursTimeString + \":\"\n            ) : \"\" }\n            { minutesTimeString }:{ secondsTimeString }\n        </Fragment>\n    )\n    return null\n}","import React, { Fragment, useMemo, useState } from 'react'\nimport {\n  Layout, Typography, InputNumber, Space,\n  Radio, Divider, Descriptions , Switch, Input,\n  notification, DatePicker, Statistic\n} from 'antd'\nimport moment, { Moment } from 'moment'\nimport { useDebounce } from 'use-debounce'\nimport { TimeUntil, useTimeUntil } from 'react-time-until'\nimport 'antd/dist/antd.css'\n\nconst { Title, Text } = Typography\nconst { Content, Sider } = Layout\n\nconst App = () => {\n  const [_delta, setDelta] = useState<number>(60000)\n  const [_date, setDate] = useState<Moment | null>(moment())\n  const [dataType, setDataType] = useState<\"delta\"|\"date\">(\"delta\")\n  const [_updateInterval, setUpdateInterval] = useState<number>(50)\n  const [format, setFormat] = useState<\"text\" | \"time\">(\"text\")\n  const [inText, setInText] = useState<string>(\"in \")\n  const [agoText, setAgoText] = useState<string>(\" ago\")\n  const [countdown, setCountdown] = useState<boolean>(false)\n  const [finishText, setFinishText] = useState<string>(\"Countdown complete\")\n\n  const date = useMemo(() => _date ? _date.toDate() : new Date(), [_date])\n  const [delta] = useDebounce(_delta, 500)\n  const [updateInterval] = useDebounce(_updateInterval, 500)\n\n  const timeUntilProps = {\n    format,\n    prefix: inText,\n    suffix: agoText,\n    finishText,\n    countdown,\n    onFinish: () => notification.info({\n      message: \"Countdown complete\"\n    })\n  }\n  const timeUntilHookProps = useMemo(() => ({\n    ...(dataType === \"delta\" ? {\n      delta\n    } : {\n      date\n    }),\n    countdown,\n    interval: updateInterval,\n  }), [dataType, delta, date, countdown, updateInterval])\n\n  const controlledValue = useTimeUntil(timeUntilHookProps)\n  const { delta: currentDelta, hours, minutes, seconds, days, months, years, finished } = controlledValue\n\n\n  return (\n    <Layout>\n      <Sider width={ 300 } style={{ background: \"#fff\", padding: 32, borderRight: \"1px solid #ccc\" }}>\n        <Space size=\"large\" direction=\"vertical\" style={{ width: \"100%\" }}>\n          {/* <Card title=\"My countdown!\" style={{ minWidth: 750 }}> */}\n            <Space size=\"large\" direction=\"vertical\" style={{ width: \"100%\" }}>\n              <Title level={ 5 }>General settings</Title>\n              <Space size=\"middle\" direction=\"vertical\">\n                <Space size=\"small\" direction=\"vertical\">\n                  { dataType === \"delta\" ? (\n                    <Fragment>\n                      Delta:\n                      <InputNumber value={ _delta } onChange={ setDelta } style={{ width: \"100%\" }} />\n                    </Fragment>\n                  ) : (\n                    <Fragment>\n                      Date:\n                      <DatePicker value={ _date } onChange={ setDate } showTime={ true } />\n                    </Fragment>\n                  ) }\n                </Space>\n                <Radio.Group\n                  size=\"small\"\n                  options={[\n                    { label: \"Delta\", value: \"delta\" },\n                    { label: \"Date\", value: \"date\" }\n                  ]}\n                  value={ dataType }\n                  onChange={ ({ target: { value } }) => setDataType(value)  }\n                  optionType=\"button\"\n                  style={{ width: \"100%\", display: \"flex\" }}\n                />\n              </Space>\n              <Space size=\"small\" direction=\"vertical\">\n                Update interval:\n                <InputNumber value={ _updateInterval } onChange={ setUpdateInterval } style={{ width: \"100%\" }} />\n              </Space>\n              <Space size=\"middle\" direction=\"vertical\">\n                <Space>\n                  <Space size=\"small\" direction=\"vertical\">\n                    <Text>Prefix text:</Text>\n                    <Input value={ inText } onChange={ ({ target: { value } }) => setInText(value) } />\n                  </Space>\n                  <Space size=\"small\" direction=\"vertical\">\n                    <Text>Suffix text:</Text>\n                    <Input value={ agoText } onChange={ ({ target: { value } }) => setAgoText(value) } />\n                  </Space>\n                </Space>\n              </Space>\n              <Space size=\"small\" direction=\"vertical\">\n                Format:\n                <Radio.Group\n                  options={[\n                    { label: \"Text\", value: \"text\" },\n                    { label: \"Time string\", value: \"time\" }\n                  ]}\n                  value={ format }\n                  onChange={ ({ target: { value } }) => setFormat(value)  }\n                  optionType=\"button\"\n                  style={{ width: \"100%\" }}\n                />\n              </Space>\n              <Divider style={{ margin: 4 }} />\n              <Title level={ 5 }>Countdown settings</Title>\n              <Space size=\"middle\">\n                Countdown:\n                <Switch checked={ countdown } onChange={ setCountdown } />\n              </Space>\n              <Space size=\"small\" direction=\"vertical\">\n                <Text disabled={ !countdown }>Finish text:</Text>\n                <Input value={ finishText } onChange={ ({ target: { value } }) => setFinishText(value) } disabled={ !countdown } />\n              </Space>\n            </Space>\n          </Space>\n        </Sider>\n        <Content style={{ padding: 32 }}>\n        <Space size=\"large\" direction=\"vertical\" style={{ width: \"100%\" }}>\n          <Space size=\"middle\" direction=\"vertical\">\n            <Statistic title=\"Countdown (uncontrolled)\" valueRender={ () => (\n              <TimeUntil { ...timeUntilProps } { ...timeUntilHookProps } />\n            ) } />\n            <Statistic title=\"Countdown (controlled using hook)\" valueRender={ () => (\n              // You can use the delta useTimeUntil to use the component with the hook.\n              <TimeUntil { ...timeUntilProps } { ...timeUntilHookProps } value={ controlledValue } onFinish={ undefined } />\n            ) } />\n            <Statistic title=\"Current delta\" suffix=\"ms\" value={ currentDelta } />\n          </Space>\n          <Descriptions bordered={ true } style={{ background: \"#fff\", width: \"100%\" }}>\n            {/* <Descriptions.Item label=\"Current delta\" span={ 3 }>{ currentDelta }</Descriptions.Item> */}\n            <Descriptions.Item label=\"Hours\">{ hours }</Descriptions.Item>\n            <Descriptions.Item label=\"Minutes\">{ minutes }</Descriptions.Item>\n            <Descriptions.Item label=\"Seconds\">{ seconds }</Descriptions.Item>\n            <Descriptions.Item label=\"Days\">{ days }</Descriptions.Item>\n            <Descriptions.Item label=\"Months\">{ months }</Descriptions.Item>\n            <Descriptions.Item label=\"Years\">{ years }</Descriptions.Item>\n            <Descriptions.Item label=\"Finished\">{ JSON.stringify(finished) }</Descriptions.Item>\n          </Descriptions>\n        </Space>\n      </Content>\n    </Layout>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}