{"version":3,"sources":["../../src/use-time-until.ts","../../src/time-until.tsx","App.tsx","index.tsx"],"names":["useTimeUntil","time","delta","countdown","_ref$countdown","onFinish","_ref$onFinish","interval","_ref$interval","useState","Date","now","currentTime","setCurrentTime","targetTime","useMemo","getTime","timeDeltaNumber","Math","max","timeDelta","rounder","ceil","floor","abs","finished","timeUntil","seconds","getUTCSeconds","minutes","getUTCMinutes","hours","getUTCHours","useEffect","updater","window","setInterval","clearInterval","TimeUntil","format","_ref$format","ago","_ref$ago","inText","_ref$inText","agoText","_ref$agoText","finishText","undefined","props","hoursText","minutesText","secondsText","hoursTimeString","toString","padStart","minutesTimeString","secondsTimeString","React","Fragment","Title","Typography","Content","Layout","Sider","App","_delta","setDelta","_updateInterval","setUpdateInterval","setFormat","setAgo","setCountdown","setFinishText","useDebounce","updateInterval","currentDelta","timeUntilProps","notification","info","message","width","style","background","padding","borderRight","size","direction","level","value","onChange","checked","Group","options","label","target","optionType","margin","className","bordered","Item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.389bd6fd.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\n\ntype Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never }\ntype XOR<T, U> = (T | U) extends object\n  ? (Without<T, U> & U) | (Without<U, T> & T)\n  : T | U\n  \ninterface BaseProps {\n    // Update interval\n    interval?: number\n}\ninterface CountdownProps {\n    // Countdown will stop at 0 instead of going into the negatives\n    countdown?: boolean\n    onFinish?: () => void\n}\nexport type UseTimeUntilProps = BaseProps & CountdownProps & XOR<{\n    time: Date\n}, {\n    delta: number\n}>\n\nexport interface TimeUntilValue {\n    delta: number,\n    seconds: number,\n    minutes: number,\n    hours: number,\n    finished: boolean\n}\n\nexport const useTimeUntil = ({\n    time,\n    delta,\n    countdown=false,\n    onFinish=() => {},\n    interval=50\n}: UseTimeUntilProps): TimeUntilValue => {\n    const [currentTime, setCurrentTime] = useState<number>(Date.now())\n\n    const targetTime = useMemo<number>(() => (\n        time ? time.getTime() : new Date(Date.now() + delta!).getTime()\n    ), [time, delta])\n\n    // Delta until targetTime is reached\n    const timeDeltaNumber = useMemo<number>(() => (\n        countdown ? Math.max(0, targetTime - currentTime) : targetTime - currentTime\n    ), [targetTime, currentTime, countdown])\n    // MS until targetTime is reached as an epoch Date\n    const timeDelta = useMemo<Date>(() => {\n        const rounder = timeDeltaNumber > 0 ? Math.ceil : Math.floor\n        // const rounder = Math.ceil\n        return new Date(\n            rounder(\n                Math.abs(timeDeltaNumber) / 1000\n            ) * 1000\n        )\n    }, [timeDeltaNumber])\n\n    const finished = useMemo(() => (\n        timeDeltaNumber <= 0\n    ), [timeDeltaNumber])\n\n    const timeUntil = useMemo(() => ({\n        delta: timeDeltaNumber,\n        seconds: timeDelta.getUTCSeconds(),\n        minutes: timeDelta.getUTCMinutes(),\n        hours: timeDelta.getUTCHours(),\n        finished\n    }), [timeDelta, timeDeltaNumber, finished])\n\n    useEffect(() => {\n        const updater = window.setInterval(() => {\n            setCurrentTime(Date.now())\n        }, interval)\n        return () => {\n            clearInterval(updater)\n        }\n    }, [interval])\n\n    useEffect(() => {\n        if (countdown && finished) onFinish()\n    }, [countdown, finished])\n\n    return timeUntil\n}","/**\n * Countdown display component\n */\nimport React, { Fragment, ReactNode } from 'react'\nimport { useTimeUntil, UseTimeUntilProps } from './use-time-until'\n\ntype TimeUntilProps = {\n    format?: \"text\" | \"time\"\n    // Prepends \"in\"/appends \"ago\"\n    // Only supported for \"text\" format\n    ago?: boolean\n    inText?: string\n    agoText?: string\n    finishText?: ReactNode\n} & UseTimeUntilProps\nexport const TimeUntil = ({\n    format=\"text\",\n    ago=false,\n    inText=\"in \",\n    agoText=\" ago\",\n    finishText=undefined,\n    ...props\n}: TimeUntilProps) => {\n    const { delta, seconds, minutes, hours, finished } = useTimeUntil(props)\n\n    const hoursText = hours !== 1 ? `${ hours } hours` : `1 hour`\n    const minutesText = minutes !== 1 ? `${ minutes } minutes` : `1 minute`\n    const secondsText = seconds !== 1 ? `${ seconds } seconds` : `1 second`\n\n    const hoursTimeString = hours === 1 ? hours : hours.toString().padStart(2, \"0\")\n    const minutesTimeString = hours === 0 && minutes === 1 ? minutes : minutes.toString().padStart(2, \"0\")\n    const secondsTimeString = seconds.toString().padStart(2, \"0\")\n    if (props.countdown && finishText && finished) return (\n        <Fragment>\n            { finishText }\n        </Fragment>\n    )\n    if (format === \"text\") return (\n        <Fragment>\n            { ago && delta >= 0 && inText }\n            { hours > 0 ? (\n                `${ hoursText } and ${ minutesText }`\n            ) : minutes > 0 ? (\n                `${ minutesText } and ${ secondsText }`\n            ) : (\n                `${ secondsText }`\n            ) }\n            { ago && delta < 0 && agoText }\n        </Fragment>\n    )\n    if (format === \"time\") return (\n        <Fragment>\n            { hours > 0 ? hoursTimeString + \":\" : \"\" }{ minutesTimeString }:{ secondsTimeString }\n        </Fragment>\n    )\n    return null\n}","import React, { useState } from 'react'\nimport { Layout, Typography, InputNumber, Space, Radio, Divider, Descriptions, Switch, Input, notification } from 'antd'\nimport { useDebounce } from 'use-debounce'\nimport { TimeUntil, useTimeUntil } from 'react-time-until'\nimport 'antd/dist/antd.css'\n\nconst { Title } = Typography\nconst { Content, Sider } = Layout\n\nconst App = () => {\n  const [_delta, setDelta] = useState<number>(60000)\n  const [_updateInterval, setUpdateInterval] = useState<number>(50)\n  const [format, setFormat] = useState<\"text\" | \"time\">(\"text\")\n  const [ago, setAgo] = useState<boolean>(false)\n  const [countdown, setCountdown] = useState<boolean>(false)\n  const [finishText, setFinishText] = useState<string>(\"Countdown complete\")\n\n  const [delta] = useDebounce(_delta, 500)\n  const [updateInterval] = useDebounce(_updateInterval, 500)\n\n  const { delta: currentDelta, hours, minutes, seconds } = useTimeUntil({ delta, countdown })\n\n  const timeUntilProps = {\n    format,\n    ago,\n    interval: updateInterval,\n    countdown,\n    finishText,\n    onFinish: () => notification.info({\n      message: \"Countdown complete\"\n    })\n  }\n\n  return (\n    <Layout>\n      <Sider width={ 300 } style={{ background: \"#fff\", padding: 32, borderRight: \"1px solid #ccc\" }}>\n        <Space size=\"large\" direction=\"vertical\" style={{ width: \"100%\" }}>\n          {/* <Card title=\"My countdown!\" style={{ minWidth: 750 }}> */}\n            <Space size=\"middle\" direction=\"vertical\" style={{ width: \"100%\" }}>\n              <Title level={ 5 }>General settings</Title>\n              <Space size=\"small\" direction=\"vertical\">\n                Time delta: <InputNumber value={ _delta } onChange={ setDelta } style={{ width: \"100%\" }} />\n              </Space>\n              <Space size=\"small\" direction=\"vertical\">\n                Update interval: <InputNumber value={ _updateInterval } onChange={ setUpdateInterval } style={{ width: \"100%\" }} />\n              </Space>\n              <Space size=\"middle\">\n                In/ago:\n                <Switch checked={ ago } onChange={ setAgo } />\n              </Space>\n              <Space size=\"small\" direction=\"vertical\">\n                Format:\n                <Radio.Group\n                  options={[\n                    { label: \"Text\", value: \"text\" },\n                    { label: \"Time string\", value: \"time\" }\n                  ]}\n                  value={ format }\n                  onChange={ ({ target: { value } }) => setFormat(value)  }\n                  optionType=\"button\"\n                  style={{ width: \"100%\" }}\n                />\n              </Space>\n              <Divider style={{ margin: 4 }} />\n              <Title level={ 5 }>Countdown settings</Title>\n              <Space size=\"middle\">\n                Countdown:\n                <Switch checked={ countdown } onChange={ setCountdown } />\n              </Space>\n              <Space size=\"small\" direction=\"vertical\">\n                Finish text:\n                <Input value={ finishText } onChange={ ({ target: { value } }) => setFinishText(value) } />\n              </Space>\n            </Space>\n          </Space>\n        </Sider>\n        <Content style={{ padding: 32 }}>\n          <Space size=\"large\" direction=\"vertical\">\n            <Space size=\"large\" direction=\"vertical\" style={{ width: \"100%\" }}>\n              <Space size=\"middle\" direction=\"vertical\">\n                <div className=\"ant-statistic\">\n                    <div className=\"ant-statistic-title\">\n                      Countdown (uncontrolled)\n                    </div>\n                    <div className=\"ant-statistic-content\">\n                      <span className=\"ant-statistic-content-value\">\n                        <TimeUntil { ...timeUntilProps } delta={ delta } />\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"ant-statistic\">\n                    <div className=\"ant-statistic-title\">\n                      Countdown (controlled using hook)\n                    </div>\n                    <div className=\"ant-statistic-content\">\n                      <span className=\"ant-statistic-content-value\">\n                        {/* You can use the delta useTimeUntil to use the component with the hook. */}\n                        <TimeUntil { ...timeUntilProps } delta={ currentDelta } onFinish={ undefined } />\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"ant-statistic\">\n                    <div className=\"ant-statistic-title\">\n                      Current delta\n                    </div>\n                    <div className=\"ant-statistic-content\">\n                      <span className=\"ant-statistic-content-value\">\n                        { currentDelta }\n                      </span>\n                      <span className=\"ant-statistic-content-suffix\">ms</span>\n                    </div>\n                  </div>\n                </Space>\n                <Descriptions bordered={ true } style={{ background: \"#fff\" }}>\n                  {/* <Descriptions.Item label=\"Current delta\" span={ 3 }>{ currentDelta }</Descriptions.Item> */}\n                  <Descriptions.Item label=\"Hours\">{ hours }</Descriptions.Item>\n                  <Descriptions.Item label=\"Minutes\">{ minutes }</Descriptions.Item>\n                  <Descriptions.Item label=\"Seconds\">{ seconds }</Descriptions.Item>\n                </Descriptions>\n            </Space>\n          {/* </Card> */}\n        </Space>\n      </Content>\n    </Layout>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}