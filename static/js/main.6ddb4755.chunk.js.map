{"version":3,"sources":["../../src/use-time-until.ts","../../src/time-until.tsx","App.tsx","index.tsx"],"names":["useTimeUntil","date","delta","countdown","_ref$countdown","onFinish","_ref$onFinish","interval","_ref$interval","useState","Date","now","currentTime","setCurrentTime","targetTime","useMemo","getTime","timeDeltaNumber","Math","max","timeDelta","rounder","ceil","floor","abs","finished","timeUntil","seconds","getUTCSeconds","minutes","getUTCMinutes","hours","getUTCHours","useEffect","updater","window","setInterval","undefined","clearInterval","TimeUntil","format","_ref$format","ago","_ref$ago","inText","_ref$inText","agoText","_ref$agoText","finishText","value","props","hoursText","minutesText","secondsText","hoursTimeString","toString","padStart","minutesTimeString","secondsTimeString","React","Fragment","Title","Typography","Text","Content","Layout","Sider","App","_delta","setDelta","moment","_date","setDate","dataType","setDataType","_updateInterval","setUpdateInterval","setFormat","setAgo","setInText","setAgoText","setCountdown","setFinishText","toDate","useDebounce","updateInterval","timeUntilProps","notification","info","message","timeUntilHookProps","controlledValue","currentDelta","width","style","background","padding","borderRight","size","direction","level","onChange","showTime","Group","options","label","target","optionType","display","checked","disabled","margin","className","bordered","Item","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ddb4755.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport { XOR } from './types'\n  \ninterface BaseProps {\n    // Update interval. If null, never update.\n    interval?: number | null\n}\ninterface CountdownProps {\n    // Countdown will stop at 0 instead of going into the negatives\n    countdown?: boolean\n    onFinish?: () => void\n}\nexport type UseTimeUntilProps = BaseProps & CountdownProps & XOR<{\n    date: Date\n}, {\n    delta: number\n}>\n\nexport interface TimeUntilValue {\n    delta: number,\n    seconds: number,\n    minutes: number,\n    hours: number,\n    finished: boolean\n}\n\nexport const useTimeUntil = ({\n    date,\n    delta,\n    countdown=false,\n    onFinish=() => {},\n    interval=50\n}: UseTimeUntilProps): TimeUntilValue => {\n    const [currentTime, setCurrentTime] = useState<number>(Date.now())\n\n    const targetTime = useMemo<number>(() => (\n        date ? date.getTime() : new Date(Date.now() + delta!).getTime()\n    ), [date, delta])\n\n    // Delta until targetTime is reached\n    const timeDeltaNumber = useMemo<number>(() => (\n        countdown ? Math.max(0, targetTime - currentTime) : targetTime - currentTime\n    ), [targetTime, currentTime, countdown])\n    // MS until targetTime is reached as an epoch Date\n    const timeDelta = useMemo<Date>(() => {\n        const rounder = timeDeltaNumber > 0 ? Math.ceil : Math.floor\n        // const rounder = Math.ceil\n        return new Date(\n            rounder(\n                Math.abs(timeDeltaNumber) / 1000\n            ) * 1000\n        )\n    }, [timeDeltaNumber])\n\n    const finished = useMemo(() => (\n        timeDeltaNumber <= 0\n    ), [timeDeltaNumber])\n\n    const timeUntil = useMemo(() => ({\n        delta: timeDeltaNumber,\n        seconds: timeDelta.getUTCSeconds(),\n        minutes: timeDelta.getUTCMinutes(),\n        hours: timeDelta.getUTCHours(),\n        finished\n    }), [timeDelta, timeDeltaNumber, finished])\n\n    useEffect(() => {\n        const updater = interval !== null ? window.setInterval(() => {\n            setCurrentTime(Date.now())\n        }, interval) : undefined\n        return () => {\n            window.clearInterval(updater)\n        }\n    }, [interval])\n\n    useEffect(() => {\n        if (countdown && finished) onFinish()\n    }, [countdown, finished])\n\n    return timeUntil\n}","/**\n * Countdown display component\n */\nimport React, { Fragment, ReactNode } from 'react'\nimport { TimeUntilValue, useTimeUntil, UseTimeUntilProps } from './use-time-until'\n\ntype TimeUntilProps = {\n    format?: \"text\" | \"time\"\n    // Prepends \"in\"/appends \"ago\"\n    // Only supported for \"text\" format\n    ago?: boolean\n    inText?: string\n    agoText?: string\n    finishText?: ReactNode\n} & Partial<UseTimeUntilProps> & Partial<{\n    value: TimeUntilValue\n}>\nexport const TimeUntil = ({\n    format=\"text\",\n    ago=false,\n    inText=\"in \",\n    agoText=\" ago\",\n    finishText=undefined,\n    value=undefined,\n    ...props\n}: TimeUntilProps) => {\n    const useTimeUntilProps: UseTimeUntilProps = value ? {\n        delta: 0,\n        interval: null\n    } : props as UseTimeUntilProps\n    let { delta, seconds, minutes, hours, finished } = useTimeUntil(useTimeUntilProps)\n    if (value) ({ delta, seconds, minutes, hours, finished } = value)\n\n    const hoursText = hours !== 1 ? `${ hours } hours` : `1 hour`\n    const minutesText = minutes !== 1 ? `${ minutes } minutes` : `1 minute`\n    const secondsText = seconds !== 1 ? `${ seconds } seconds` : `1 second`\n\n    const hoursTimeString = hours === 1 ? hours : hours.toString().padStart(2, \"0\")\n    const minutesTimeString = hours === 0 && minutes === 1 ? minutes : minutes.toString().padStart(2, \"0\")\n    const secondsTimeString = seconds.toString().padStart(2, \"0\")\n    if (props.countdown && finishText && finished) return (\n        <Fragment>\n            { finishText }\n        </Fragment>\n    )\n    if (format === \"text\") return (\n        <Fragment>\n            { ago && delta >= 0 && inText }\n            { hours > 0 ? (\n                `${ hoursText } and ${ minutesText }`\n            ) : minutes > 0 ? (\n                `${ minutesText } and ${ secondsText }`\n            ) : (\n                `${ secondsText }`\n            ) }\n            { ago && delta < 0 && agoText }\n        </Fragment>\n    )\n    if (format === \"time\") return (\n        <Fragment>\n            { hours > 0 ? hoursTimeString + \":\" : \"\" }{ minutesTimeString }:{ secondsTimeString }\n        </Fragment>\n    )\n    return null\n}","import React, { Fragment, useMemo, useState } from 'react'\nimport {\n  Layout, Typography, InputNumber, Space,\n  Radio, Divider, Descriptions , Switch, Input,\n  notification, DatePicker\n} from 'antd'\nimport moment, { Moment } from 'moment'\nimport { useDebounce } from 'use-debounce'\nimport { TimeUntil, useTimeUntil } from 'react-time-until'\nimport 'antd/dist/antd.css'\n\nconst { Title, Text } = Typography\nconst { Content, Sider } = Layout\n\nconst App = () => {\n  const [_delta, setDelta] = useState<number>(60000)\n  const [_date, setDate] = useState<Moment | null>(moment())\n  const [dataType, setDataType] = useState<\"delta\"|\"date\">(\"delta\")\n  const [_updateInterval, setUpdateInterval] = useState<number>(50)\n  const [format, setFormat] = useState<\"text\" | \"time\">(\"text\")\n  const [ago, setAgo] = useState<boolean>(false)\n  const [inText, setInText] = useState<string>(\"in \")\n  const [agoText, setAgoText] = useState<string>(\" ago\")\n  const [countdown, setCountdown] = useState<boolean>(false)\n  const [finishText, setFinishText] = useState<string>(\"Countdown complete\")\n\n  const date = useMemo(() => _date ? _date.toDate() : new Date(), [_date])\n  const [delta] = useDebounce(_delta, 500)\n  const [updateInterval] = useDebounce(_updateInterval, 500)\n\n  const timeUntilProps = {\n    format,\n    ago,\n    inText,\n    agoText,\n    finishText,\n    countdown,\n    onFinish: () => notification.info({\n      message: \"Countdown complete\"\n    })\n  }\n  const timeUntilHookProps = useMemo(() => ({\n    ...(dataType === \"delta\" ? {\n      delta\n    } : {\n      date\n    }),\n    countdown,\n    interval: updateInterval,\n  }), [dataType, delta, date, countdown, updateInterval])\n\n  const controlledValue = useTimeUntil(timeUntilHookProps)\n  const { delta: currentDelta, hours, minutes, seconds, finished } = controlledValue\n\n\n  return (\n    <Layout>\n      <Sider width={ 300 } style={{ background: \"#fff\", padding: 32, borderRight: \"1px solid #ccc\" }}>\n        <Space size=\"large\" direction=\"vertical\" style={{ width: \"100%\" }}>\n          {/* <Card title=\"My countdown!\" style={{ minWidth: 750 }}> */}\n            <Space size=\"large\" direction=\"vertical\" style={{ width: \"100%\" }}>\n              <Title level={ 5 }>General settings</Title>\n              <Space size=\"middle\" direction=\"vertical\">\n                <Space size=\"small\" direction=\"vertical\">\n                  { dataType === \"delta\" ? (\n                    <Fragment>\n                      Delta:\n                      <InputNumber value={ _delta } onChange={ setDelta } style={{ width: \"100%\" }} />\n                    </Fragment>\n                  ) : (\n                    <Fragment>\n                      Date:\n                      <DatePicker value={ _date } onChange={ setDate } showTime={ true } />\n                    </Fragment>\n                  ) }\n                </Space>\n                <Radio.Group\n                  size=\"small\"\n                  options={[\n                    { label: \"Delta\", value: \"delta\" },\n                    { label: \"Date\", value: \"date\" }\n                  ]}\n                  value={ dataType }\n                  onChange={ ({ target: { value } }) => setDataType(value)  }\n                  optionType=\"button\"\n                  style={{ width: \"100%\", display: \"flex\" }}\n                />\n              </Space>\n              <Space size=\"small\" direction=\"vertical\">\n                Update interval:\n                <InputNumber value={ _updateInterval } onChange={ setUpdateInterval } style={{ width: \"100%\" }} />\n              </Space>\n              <Space size=\"middle\" direction=\"vertical\">\n                <Space size=\"middle\">\n                  In/ago:\n                  <Switch checked={ ago } onChange={ setAgo } />\n                </Space>\n                <Space>\n                  <Space size=\"small\" direction=\"vertical\">\n                    <Text disabled={ !ago }>\"In\" text:</Text>\n                    <Input value={ inText } onChange={ ({ target: { value } }) => setInText(value) } disabled={ !ago } />\n                  </Space>\n                  <Space size=\"small\" direction=\"vertical\">\n                    <Text disabled={ !ago }>\"Ago\" text:</Text>\n                    <Input value={ agoText } onChange={ ({ target: { value } }) => setAgoText(value) } disabled={ !ago } />\n                  </Space>\n                </Space>\n              </Space>\n              <Space size=\"small\" direction=\"vertical\">\n                Format:\n                <Radio.Group\n                  options={[\n                    { label: \"Text\", value: \"text\" },\n                    { label: \"Time string\", value: \"time\" }\n                  ]}\n                  value={ format }\n                  onChange={ ({ target: { value } }) => setFormat(value)  }\n                  optionType=\"button\"\n                  style={{ width: \"100%\" }}\n                />\n              </Space>\n              <Divider style={{ margin: 4 }} />\n              <Title level={ 5 }>Countdown settings</Title>\n              <Space size=\"middle\">\n                Countdown:\n                <Switch checked={ countdown } onChange={ setCountdown } />\n              </Space>\n              <Space size=\"small\" direction=\"vertical\">\n                <Text disabled={ !countdown }>Finish text:</Text>\n                <Input value={ finishText } onChange={ ({ target: { value } }) => setFinishText(value) } disabled={ !countdown } />\n              </Space>\n            </Space>\n          </Space>\n        </Sider>\n        <Content style={{ padding: 32 }}>\n        <Space size=\"large\" direction=\"vertical\" style={{ width: \"100%\" }}>\n          <Space size=\"middle\" direction=\"vertical\">\n            <div className=\"ant-statistic\">\n                <div className=\"ant-statistic-title\">\n                  Countdown (uncontrolled)\n                </div>\n                <div className=\"ant-statistic-content\">\n                  <span className=\"ant-statistic-content-value\">\n                    <TimeUntil { ...timeUntilProps } { ...timeUntilHookProps } />\n                  </span>\n                </div>\n              </div>\n              <div className=\"ant-statistic\">\n                <div className=\"ant-statistic-title\">\n                  Countdown (controlled using hook)\n                </div>\n                <div className=\"ant-statistic-content\">\n                  <span className=\"ant-statistic-content-value\">\n                    {/* You can use the delta useTimeUntil to use the component with the hook. */}\n                    <TimeUntil { ...timeUntilProps } { ...timeUntilHookProps } value={ controlledValue } onFinish={ undefined } />\n                  </span>\n                </div>\n              </div>\n              <div className=\"ant-statistic\">\n                <div className=\"ant-statistic-title\">\n                  Current delta\n                </div>\n                <div className=\"ant-statistic-content\">\n                  <span className=\"ant-statistic-content-value\">\n                    { currentDelta }\n                  </span>\n                  <span className=\"ant-statistic-content-suffix\">ms</span>\n                </div>\n              </div>\n            </Space>\n            <Descriptions bordered={ true } style={{ background: \"#fff\", width: \"100%\" }}>\n              {/* <Descriptions.Item label=\"Current delta\" span={ 3 }>{ currentDelta }</Descriptions.Item> */}\n              <Descriptions.Item label=\"Hours\">{ hours }</Descriptions.Item>\n              <Descriptions.Item label=\"Minutes\">{ minutes }</Descriptions.Item>\n              <Descriptions.Item label=\"Seconds\">{ seconds }</Descriptions.Item>\n              <Descriptions.Item label=\"Finished\">{ JSON.stringify(finished) }</Descriptions.Item>\n            </Descriptions>\n        </Space>\n      </Content>\n    </Layout>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}